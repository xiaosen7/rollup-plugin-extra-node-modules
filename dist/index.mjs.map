{"version":3,"sources":["../src/plugin.ts","../src/utils.ts","../src/models/PathToNameResolver.ts","../src/models/RollupHelper.ts","../src/models/NodeModuleMap.ts","../src/models/NodeModule.ts","../src/index.ts"],"sourcesContent":["import fs from \"fs/promises\";\nimport path, { join } from \"path\";\n\nimport { npmUtils } from \"./utils\";\nimport _ from \"lodash\";\n\nimport { PathToNameResolver, RollupHelper } from \"./models\";\nimport {\n  AllSharedNodeModule,\n  AssetsNodeModule,\n  ChunksNodeModule,\n} from \"./models/NodeModule\";\nimport { NodeModuleMap } from \"./models/NodeModuleMap\";\n\nimport type * as rollup from \"rollup\";\n\nexport interface ISharedNodeModulePluginOptions {\n  /**\n   * Your node module prefix.\n   * @example \"@my-lib/\"\n   */\n  npmPrefix?: string;\n  packageJson?: any;\n  /**\n   * The unprefixed name of chunk type node module.\n   * @default \"chunk\"\n   */\n  chunkModuleName?: string;\n  /**\n   * The unprefixed name of assets type node module.\n   * @default \"assets\"\n   */\n  assetsModuleName?: string;\n  cwd?: string;\n  /**\n   * The unprefixed name of module which exports all node modules you input.\n   */\n  allSharedModuleName?: string;\n  /**\n   * Override node module names.\n   * @example\n   *\n   * ```ts\n   * {\n   * \"/a/b/c.ts\": \"a-b-c\"\n   * }\n   * ```\n   */\n  overrideNames?: Record<string, string>;\n  /**\n   * Input files you want to build to node modules, support glob text.\n   */\n  input: string[];\n  /**\n   * @default \"dist\"\n   */\n  outDir: string;\n  /**\n   * Whether or not to write dts file with per js files, this option need you provide typescript plugin and build declaration files into assets node module types directory.\n   * @default true\n   */\n  writeDts?: boolean;\n}\n\nexport async function nodeModulesPlugin(\n  options: ISharedNodeModulePluginOptions\n): Promise<rollup.Plugin<any>> {\n  const {\n    cwd = process.cwd(),\n    packageJson = JSON.parse(\n      await fs.readFile(path.resolve(cwd, \"package.json\"), \"utf-8\")\n    ),\n    npmPrefix = \"\",\n    chunkModuleName = \"chunks\",\n    assetsModuleName = \"assets\",\n    allSharedModuleName = \"all-shared\",\n    overrideNames,\n    input,\n    outDir = \"dist\",\n    writeDts = true,\n  } = options;\n\n  const sharedNameResolver = new PathToNameResolver({\n    transform: (s) => `${npmPrefix}${_.kebabCase(s.join(\" \"))}`,\n    overrides: overrideNames,\n  });\n  const nodeModuleMap = await NodeModuleMap.create(\n    input,\n    cwd,\n    outDir,\n    (x) => sharedNameResolver.resolve(x).name\n  );\n  const rollupHelper = new RollupHelper(nodeModuleMap, npmPrefix);\n\n  const withNpmPrefix = (x: string) => `${npmPrefix}${x}`;\n\n  const prefixedChunksModuleName = withNpmPrefix(chunkModuleName);\n  const prefixedAssetsModuleName = withNpmPrefix(assetsModuleName);\n  const prefixedAllSharedModuleName = withNpmPrefix(allSharedModuleName);\n\n  return {\n    name: \"shared-plugin\",\n\n    options(options) {\n      return {\n        ...options,\n        input: rollupHelper.getInput(),\n      };\n    },\n\n    /**\n     * Rollup 将所有模块都处理完成以后但还未输出之前会进入到这里\n     *\n     * generateBundle 会在 outputOptions 之前执行\n     * @param options\n     * @param bundle\n     */\n    async generateBundle(options, bundle) {\n      // 打包时各个入口文件的公共部分会被 Rollup 生成 chunk\n      const chunkNodeModule = new ChunksNodeModule({\n        name: prefixedChunksModuleName,\n        outDir: join(outDir, prefixedChunksModuleName),\n        version: await npmUtils.getNextVersionOfPackage(\n          prefixedChunksModuleName,\n          \"major\"\n        ),\n      });\n      nodeModuleMap.set(prefixedChunksModuleName, chunkNodeModule);\n\n      // 资产模块，比如 d.ts 文件\n      const assetsNodeModule = new AssetsNodeModule({\n        name: prefixedAssetsModuleName,\n        outDir: join(outDir, prefixedAssetsModuleName),\n        version: await npmUtils.getNextVersionOfPackage(\n          prefixedAssetsModuleName,\n          \"major\"\n        ),\n      });\n      nodeModuleMap.set(prefixedAssetsModuleName, assetsNodeModule);\n\n      // 这个模块是用来汇聚所有的共享模块的，内部包含了所有的共享模块\n      const allSharedNodeModule = new AllSharedNodeModule({\n        name: prefixedAllSharedModuleName,\n        nodeModuleMap: nodeModuleMap,\n        outDir: join(outDir, prefixedAllSharedModuleName),\n        formatDirname: (x: string) => x.replace(npmPrefix, \"\"),\n        version: await npmUtils.getNextVersionOfPackage(\n          prefixedAllSharedModuleName,\n          \"major\"\n        ),\n      });\n      nodeModuleMap.set(prefixedAllSharedModuleName, allSharedNodeModule);\n\n      // 把 output 放到 node module 对象当中，方便后续进行处理\n      Object.values(bundle).forEach(async (output) => {\n        if (output.type === \"asset\") {\n          // assets module 包含类型文件\n          nodeModuleMap.get(prefixedAssetsModuleName)!.outputs.push(output);\n        } else if (!output.isEntry) {\n          // chunks module\n          nodeModuleMap.get(prefixedChunksModuleName)!.outputs.push(output);\n        } else {\n          // shared module\n          nodeModuleMap.get(output.name)!.outputs.push(output);\n        }\n      });\n      // 转换代码 导入路径重定向处理\n      await nodeModuleMap.transformOutput((x: rollup.OutputChunk) =>\n        rollupHelper.transformOutput(x)\n      );\n      // 外置依赖处理，生成各个模块的外部依赖\n      await nodeModuleMap.resolveDependencies(packageJson);\n      nodeModuleMap.toArray().forEach(([_, module]) => {\n        if (!module.isAssets()) {\n          module.dependencies.set(\n            prefixedAssetsModuleName,\n            assetsNodeModule.version\n          );\n        }\n      });\n      // 生成 package.json、README.md\n      await nodeModuleMap.writeNodeModuleFiles({\n        cwd,\n        prefixedAssetsModuleName,\n        writeDts,\n      });\n      // 生成一个汇总 json 文件\n      await nodeModuleMap.writeSharedModuleJson(\n        join(outDir, \"node-modules.json\")\n      );\n    },\n\n    outputOptions(options) {\n      return {\n        ...options,\n        chunkFileNames: `${prefixedChunksModuleName}/[name].js`,\n        assetFileNames: `${prefixedAssetsModuleName}/[name].js`,\n        entryFileNames: \"[name]/index.js\",\n      };\n    },\n  };\n}\n","import semver from \"semver\";\nimport invariant from \"invariant\";\nimport { isAbsolute, resolve } from \"path\";\nimport { command } from \"execa\";\n\nexport function createExternalModulesMatchFn(externalModules: string[]) {\n  /**\n   * @see https://github.com/pmowrer/rollup-plugin-peer-deps-external/blob/master/src/get-modules-matcher.js\n   */\n  const regExps = externalModules.map(\n    (module) => new RegExp(`^${module}(\\\\/\\.+)*$`)\n  );\n\n  /**\n   * @returns return the external module if it matches the id, or undefined\n   */\n  return function (id: string) {\n    const index = regExps.findIndex((r) => r.test(id));\n    if (index >= 0) {\n      return externalModules[index];\n    }\n  };\n}\n\nexport function replaceImportCodeWithModules(\n  code: string,\n  isExternal: (x: string) => boolean,\n  prefix: string\n) {\n  return code.replace(/import\\s(\\\"|\\')\\.\\.\\/(.*)\\//g, (substr, seg, module) => {\n    if (isExternal(module)) {\n      return `import ${seg}${prefix}${module}/`;\n    }\n    return substr;\n  });\n}\n\nexport function replaceImportFromCodeWithModules(\n  code: string,\n  isExternal: (x: string) => boolean,\n  prefix: string\n) {\n  return code.replace(/from\\s(\\\"|\\')\\.\\.\\/(.*)\\//g, (substr, seg, module) => {\n    if (isExternal(module)) {\n      return `from ${seg}${prefix}${module}/`;\n    }\n    return substr;\n  });\n}\n\nexport namespace npmUtils {\n  export async function getLastVersionOfPackage(npmPackage: string) {\n    try {\n      const { stdout } = await command(\n        `npm view ${npmPackage} version --registry ${process.env.FETCH_REPOSITORY}`\n      );\n      return stdout;\n    } catch (error: any) {\n      if (error.message.includes(\"404 Not Found\")) {\n        return \"0.0.0\";\n      }\n\n      throw error;\n    }\n  }\n\n  export async function getNextVersionOfPackage(\n    packageName: string,\n    type: semver.ReleaseType\n  ) {\n    const lastVersion = await getLastVersionOfPackage(packageName);\n    const nextVersion = semver.inc(lastVersion, type);\n    invariant(nextVersion, \"Next version should not be null.\");\n    return nextVersion;\n  }\n}\n\nexport namespace pathUtils {\n  export function ensureAbsolute(path: string, cwd: string = process.cwd()) {\n    if (isAbsolute(path)) {\n      return path;\n    }\n\n    return resolve(cwd, path);\n  }\n}\n","import path, { join } from \"path\";\n\nimport { pathUtils } from \"../utils\";\nimport normalizePath from \"normalize-path\";\n\nexport interface ISharedNameResolverOptions {\n  overrides?: Record<string, string>;\n  /**\n   * 基于哪一个路径来解析获取模块名称，默认和 cwd 一样\n   *\n   * @default cwd\n   */\n  baseDir?: string;\n  /**\n   * 工作路径\n   *\n   * @default process.cwd()\n   */\n  cwd?: string;\n  /**\n   * 在解析过程中去掉的那部分名称\n   *\n   * @default\n   * ['src', 'pages', 'index']\n   */\n  ignoreSegments?: string[];\n  /**\n   * 转换 filename\n   *\n   * @default x => x\n   *\n   * @example\n   * x => x.replace('.stories', '')\n   */\n  transformFileName?: (name: string) => string;\n  /**\n   * 将获取的 segments 转为最终结果\n   *\n   * @default segments => segments.join('-')\n   */\n  transform?: (segments: string[]) => string;\n  /**\n   * 解析到根处的名称\n   *\n   * @default 'root'\n   */\n  rootName?: string;\n}\n\n/**\n * 在路径中保留有效信息从而获取一个名称\n */\nexport class PathToNameResolver {\n  private overrideSharedNames: Record<string, string>;\n  private baseDir: string;\n  private cwd: string;\n  private droppableSegments: string[];\n  private rootName: string;\n  private transform: (segments: string[]) => string;\n  private transformFileName: (name: string) => string;\n\n  constructor(options: ISharedNameResolverOptions = {}) {\n    const {\n      overrides: overrideSharedNames = {},\n      cwd = process.cwd(),\n      baseDir = cwd,\n      ignoreSegments: droppableSegments = [\"src\", \"pages\", \"index\"],\n      rootName = \"root\",\n      transform = (x) => x.join(\"-\"),\n      transformFileName = (x) => x,\n    } = options;\n    this.baseDir = baseDir;\n    this.overrideSharedNames = overrideSharedNames;\n    this.cwd = cwd;\n    this.droppableSegments = droppableSegments;\n    this.rootName = rootName;\n    this.transform = transform;\n    this.transformFileName = transformFileName;\n  }\n\n  resolve(filePath: string) {\n    const absolute: string = pathUtils.ensureAbsolute(filePath, this.cwd);\n    if (this.overrideSharedNames[absolute]) {\n      return {\n        name: this.transform([this.overrideSharedNames[absolute]]),\n        override: true,\n      };\n    }\n\n    return this.resolveIgnoreOverrides(filePath);\n  }\n\n  resolveIgnoreOverrides(filePath: string) {\n    const segments = this.splitToSegments(\n      normalizePath(\n        path.relative(\n          this.baseDir,\n          pathUtils.ensureAbsolute(filePath, this.cwd)\n        )\n      )\n    );\n    if (segments.length === 0) {\n      return {\n        name: this.rootName,\n        override: false,\n      };\n    }\n\n    return {\n      name: this.transform(segments),\n      override: false,\n    };\n  }\n\n  private splitToSegments(relativePath: string) {\n    const { dir, name } = path.parse(relativePath);\n\n    return normalizePath(join(dir, this.transformFileName(name)))\n      .split(\"/\")\n      .filter((x) => !this.droppableSegments.includes(x));\n  }\n}\n","import invariant from \"invariant\";\n\nimport {\n  replaceImportCodeWithModules,\n  replaceImportFromCodeWithModules,\n} from \"../utils\";\n\nimport type { NodeModuleMap } from \"./NodeModuleMap\";\nimport type * as rollup from \"rollup\";\n\nexport class RollupHelper {\n  constructor(private map: NodeModuleMap, private npmPrefix: string) {}\n\n  getInput() {\n    return this.map.toArray().reduce((acc, [sharedName, nodeModule]) => {\n      if (nodeModule.isShared()) {\n        acc[sharedName] = nodeModule.asShared().sourceFilePath;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }\n\n  async transformOutput(output: rollup.OutputChunk) {\n    const isSharedModule = (x: string) => {\n      invariant(\n        this.map.has(`${this.npmPrefix}${x}`),\n        `${x} 应该包含在 node modules map 当中`\n      );\n      return true;\n    };\n    let transformed = output.code;\n    // ../y/add.js => @app-xxx/y/add.js\n    transformed = replaceImportCodeWithModules(\n      transformed,\n      isSharedModule,\n      this.npmPrefix\n    );\n    transformed = replaceImportFromCodeWithModules(\n      transformed,\n      isSharedModule,\n      this.npmPrefix\n    );\n    output.code = transformed;\n  }\n}\n","import { join } from \"path\";\n\nimport { npmUtils } from \"../utils\";\nimport fg from \"fast-glob\";\nimport fsx from \"fs-extra\";\nimport invariant from \"invariant\";\nimport _ from \"lodash\";\n\nimport { createExternalModulesMatchFn } from \"../utils\";\n\nimport { ENodeModuleKind, SharedNodeModule } from \"./NodeModule\";\n\nimport type { ITransform, NodeModule } from \"./NodeModule\";\n\n/**\n * 一个 map，打包结束后这里面每一项最后都会生成一个 npm 模块文件夹\n */\nexport class NodeModuleMap extends Map</** 模块名称 */ string, NodeModule> {\n  /**\n   * 创建一个 NodeModuleMap 对象，并使用 input 来初始化共享模块\n   * @param input\n   * @param cwd\n   * @param outDir\n   * @param resolveSourcePathToSharedName\n   * @returns\n   */\n  static async create(\n    input: string[],\n    cwd: string,\n    outDir: string,\n    resolveSourcePathToSharedName: (x: string) => string\n  ) {\n    const map = new NodeModuleMap();\n    const inputFiles = await fg(input, { absolute: true, cwd });\n\n    await Promise.all(\n      inputFiles.map(async (filePath) => {\n        const sharedName = resolveSourcePathToSharedName(filePath);\n        map.set(\n          sharedName,\n          new SharedNodeModule({\n            name: sharedName,\n            sourceFilePath: filePath,\n            outDir: join(outDir, sharedName),\n            version: await npmUtils.getNextVersionOfPackage(\n              sharedName,\n              \"major\"\n            ),\n          })\n        );\n      })\n    );\n\n    return map;\n  }\n\n  constructor() {\n    super();\n  }\n\n  set(k: string, v: NodeModule) {\n    invariant(!this.has(k), `Can't set shared name \\`${k}\\` twice.`);\n    return super.set(k, v);\n  }\n\n  toArray() {\n    return Array.from(this.entries());\n  }\n\n  filterSharedModules() {\n    return this.toArray().filter(\n      (x) => x[1].kind === ENodeModuleKind.Shared\n    ) as [string, SharedNodeModule][];\n  }\n\n  getDependenciesFromSharedModules() {\n    const ret: Record<string, string> = {};\n    this.filterSharedModules().forEach(([name, nodeModule]) => {\n      ret[name] = nodeModule.version;\n    });\n    return ret;\n  }\n\n  async transformOutput(transform: ITransform) {\n    await Promise.all(\n      this.toArray().map(([_, module]) => module.transformOutput(transform))\n    );\n  }\n\n  async resolveDependencies(packageJson: any) {\n    const packageJsonDependencies = packageJson.dependencies ?? {};\n    const packageJsonPeerDependencies = packageJson.peerDependencies ?? {};\n    const externals = [\n      ...Object.keys(packageJsonDependencies),\n      ...Object.keys(packageJsonPeerDependencies),\n      ...this.keys(),\n    ];\n    const matchExternal = createExternalModulesMatchFn(externals);\n\n    /**\n     * 通过传入导入路径来获得三方模块及其版本号\n     * @param id\n     * @returns\n     */\n    const resolveDependence = async (id: string) => {\n      const name = matchExternal(id);\n      if (!name) {\n        return;\n      }\n\n      let version: string | undefined;\n      if (packageJson?.dependencies?.[name]) {\n        version = packageJson.dependencies[name];\n      } else if (packageJson?.peerDependencies?.[name]) {\n        version = packageJson.peerDependencies[name];\n      } else {\n        version = this.get(name)?.version;\n      }\n\n      invariant(version, `Can't get version of ${name}`);\n      return [name, version] as [string, string];\n    };\n    await Promise.all(\n      this.toArray().map(([_, module]) =>\n        module.resolveDependencies(resolveDependence)\n      )\n    );\n  }\n\n  async writeNodeModuleFiles(options: {\n    cwd: string;\n    prefixedAssetsModuleName: string;\n    writeDts: boolean;\n  }) {\n    // 这里因为共享模块在生成\n    await Promise.all(this.toArray().map(([_, x]) => x.writeFiles(options)));\n  }\n\n  async writeSharedModuleJson(outFilePath: string) {\n    const sharedModules = [...this.values()].map((x) =>\n      _.pick(x, [\"name\", \"version\"])\n    );\n    await fsx.writeFile(outFilePath, JSON.stringify(sharedModules, null, 2));\n  }\n}\n","import path, { join } from \"path\";\n\nimport fsx from \"fs-extra\";\nimport invariant from \"invariant\";\nimport _ from \"lodash\";\nimport { dedent } from \"ts-dedent\";\n\nimport type { NodeModuleMap } from \"./NodeModuleMap\";\nimport type * as rollup from \"rollup\";\n\nexport enum ENodeModuleKind {\n  Shared,\n  Chunks,\n  Assets,\n  AllShared,\n}\n\nexport type ITransform = (output: rollup.OutputChunk) => Promise<void>;\nexport type IResolveDependence = (\n  id: string\n) => Promise<[string, string] | undefined>;\n\ninterface INodeModuleOptions {\n  name: string;\n  outDir: string;\n  version: string;\n}\n\nexport abstract class NodeModule {\n  abstract kind: ENodeModuleKind;\n\n  readonly name: string;\n  readonly outDir: string;\n  readonly dependencies: Map<string, string> = new Map();\n  readonly outputs: (rollup.OutputChunk | rollup.OutputAsset)[] = [];\n  readonly version: string;\n\n  constructor(options: INodeModuleOptions) {\n    const { name, outDir, version } = options;\n    this.name = name;\n    this.outDir = outDir;\n    this.version = version;\n  }\n\n  async transformOutput(transform: ITransform) {\n    await Promise.all(this.getChunkOutputs().map(_.unary(transform)));\n  }\n\n  async resolveDependencies(resolveDependence: IResolveDependence) {\n    await Promise.all(\n      this.getChunkOutputs()\n        .map(async (x) => {\n          return x.imports.map(async (id) => {\n            const [name, version] = (await resolveDependence(id)) ?? [];\n            name && version && this.dependencies.set(name, version);\n          });\n        })\n        .flat()\n    );\n  }\n\n  async writeFiles({\n    cwd,\n    prefixedAssetsModuleName,\n    writeDts,\n  }: {\n    cwd: string;\n    prefixedAssetsModuleName: string;\n    writeDts: boolean;\n  }) {\n    // write package json\n    const packageJsonToWrite = {\n      name: this.name,\n      version: this.version,\n      type: \"module\",\n      sideEffects: false,\n      dependencies: _.fromPairs([...this.dependencies.entries()]),\n    };\n\n    await fsx.ensureDir(this.outDir);\n    await fsx.writeFile(\n      join(this.outDir, \"package.json\"),\n      JSON.stringify(packageJsonToWrite, null, 2)\n    );\n\n    // write readme\n    // 这里是用到了 Rollup 的 output 对象提供的一些信息，比如导出变量\n    const readmePath = path.join(this.outDir, \"README.md\");\n    let readmeContent = dedent`\n    # ${this.name}\n\n    ## Installation\n\n    npm\n    \n    \\`\\`\\`bash\n    npm i ${this.name}\n    \\`\\`\\`\n\n    pnpm\n\n    \\`\\`\\`bash\n    pnpm i ${this.name}\n    \\`\\`\\`\n\n    yarn\n\n    \\`\\`\\`bash\n    yarn add ${this.name}\n    \\`\\`\\`\n\n    `;\n    if (\n      this.kind === ENodeModuleKind.Shared &&\n      this.outputs[0]?.type === \"chunk\"\n    ) {\n      const outputChunk = this.outputs[0];\n      readmeContent += dedent`\n      \n      ## Usage\n\n      \\`\\`\\`ts\n      import { \n        ${\n          outputChunk.exports\n            .map((x) => (x === \"default\" ? `default as defaultExport` : x))\n            .join(\",\\n\") ?? \"\"\n        }\n      } from '${this.name}';\n      \\`\\`\\`\n      `;\n    }\n\n    await fsx.writeFile(readmePath, readmeContent);\n\n    if (!writeDts || !this.isShared() || !(this.outputs[0]?.type === \"chunk\")) {\n      return;\n    }\n\n    // write index.d.ts\n    // 因为 dts 文件被打包到 assets 模块当中了，所以需要额外生成，\n    // 因为 dts 文件生成的结构是保留源代码目录结构的，所以我们可以利用当前模块的源码文件相对于 src 的路径来拼凑出一个指向 assets 模块里的文件\n    const outputChunk = this.outputs[0];\n\n    const relativePath = path.relative(\n      path.join(cwd, \"src\"),\n      this.asShared().sourceFilePath\n    );\n    const dtsContent = dedent`\n    export * from \"${prefixedAssetsModuleName}/types/${relativePath.replace(\n      path.extname(relativePath),\n      \"\"\n    )}\";\n    ${\n      outputChunk.exports.includes(\"default\")\n        ? `export {default} from \"${prefixedAssetsModuleName}/types/${relativePath.replace(\n            path.extname(relativePath),\n            \"\"\n          )}\";`\n        : \"\"\n    }\n    `;\n    await fsx.ensureDir(this.outDir);\n    await fsx.writeFile(join(this.outDir, \"index.d.ts\"), dtsContent);\n  }\n\n  getChunkOutputs() {\n    return this.outputs.filter(\n      (x) => x.type === \"chunk\"\n    ) as rollup.OutputChunk[];\n  }\n\n  isShared() {\n    return this instanceof SharedNodeModule;\n  }\n\n  asShared() {\n    return this as unknown as SharedNodeModule;\n  }\n\n  isChunks() {\n    return this instanceof ChunksNodeModule;\n  }\n\n  asChunks() {\n    return this as unknown as ChunksNodeModule;\n  }\n\n  isAssets() {\n    return this instanceof AssetsNodeModule;\n  }\n\n  asAssets() {\n    return this as unknown as AssetsNodeModule;\n  }\n}\n\ninterface ISharedNodeModuleOptions extends INodeModuleOptions {\n  sourceFilePath: string;\n}\n\n/**\n * 共享模块\n */\nexport class SharedNodeModule extends NodeModule {\n  readonly kind: ENodeModuleKind.Shared = ENodeModuleKind.Shared;\n\n  readonly sourceFilePath: string;\n\n  constructor(options: ISharedNodeModuleOptions) {\n    super(options);\n    this.sourceFilePath = options.sourceFilePath;\n  }\n}\n\n/**\n * chunks 模块，打包时多个共享模块可能依赖同一份文件，Rollup 会将他们提取出来，这个模块就是包含了这些的\n */\nexport class ChunksNodeModule extends NodeModule {\n  readonly kind: ENodeModuleKind.Chunks = ENodeModuleKind.Chunks;\n}\n\n/**\n * 资产模块，比如 d.ts 文件会存放到这里\n */\nexport class AssetsNodeModule extends NodeModule {\n  readonly kind: ENodeModuleKind.Assets = ENodeModuleKind.Assets;\n}\n\ninterface IAllSharedNodeModuleOptions extends INodeModuleOptions {\n  nodeModuleMap: NodeModuleMap;\n  formatDirname: (sharedName: string) => string;\n}\n\n/**\n * 所有共享模块的汇聚模块，可以把它当成一个从当前应用抽离出来的组件库，它不参与 Rollup 构建，输出文件需要我们自己来写入\n */\nexport class AllSharedNodeModule extends NodeModule {\n  readonly kind: ENodeModuleKind.AllShared = ENodeModuleKind.AllShared;\n  nodeModuleMap: NodeModuleMap;\n  formatDirname: (sharedName: string) => string;\n\n  constructor(options: IAllSharedNodeModuleOptions) {\n    super(options);\n    this.nodeModuleMap = options.nodeModuleMap;\n    this.formatDirname = options.formatDirname;\n  }\n\n  /**\n   * 遍历每个共享模块来生成一个文件夹，然后创建一个入口文件导出共享模块里的所有内容\n   */\n  async writeFiles() {\n    const tasks = this.nodeModuleMap\n      .filterSharedModules()\n      .map(async ([name, module]) => {\n        // 因为在 Rollup 配置项中，我们只指定了一个 output 选项，所以这里每个入口模块最后打包出来 OutputChunk 只有一个\n        invariant(\n          module.outputs.length === 1 && module.outputs[0].type === \"chunk\",\n          `Shared node module's output maybe wrong.`\n        );\n\n        // js\n        const hasDefaultExport = module.outputs[0].exports.includes(\"default\");\n        const jsFilePath = path.join(\n          this.outDir,\n          this.formatDirname(name),\n          \"index.js\"\n        );\n        const jsContent = dedent`\n          export * from \"${name}\";\n          ${hasDefaultExport ? `export { default } from \"${name}\";` : \"\"}\n        `;\n        await fsx.ensureFile(jsFilePath);\n        await fsx.writeFile(jsFilePath, jsContent);\n\n        // dts\n        const dtsFilePath = path.join(\n          this.outDir,\n          this.formatDirname(name),\n          \"index.d.ts\"\n        );\n        const dtsContent = dedent`\n          export * from \"${name}\";\n          ${hasDefaultExport ? `export { default } from \"${name}\";` : \"\"}\n        `;\n        await fsx.ensureFile(dtsFilePath);\n        await fsx.writeFile(dtsFilePath, dtsContent);\n      });\n    await Promise.all(tasks);\n\n    // package.json\n    const packageJson = {\n      name: this.name,\n      version: this.version,\n      type: \"module\",\n      // 由于我们在代码里用到了共享模块，所以将这些共享模块设置成依赖项\n      dependencies: this.nodeModuleMap.getDependenciesFromSharedModules(),\n    };\n    await fsx.writeJson(join(this.outDir, \"package.json\"), packageJson, {\n      spaces: 2,\n    });\n  }\n}\n","import { nodeModulesPlugin } from \"./plugin\";\n\nexport default nodeModulesPlugin;\n\nexport * from \"./utils\";\nexport * from \"./plugin\";\nexport * from \"./models\";\n"],"mappings":"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","names":["path","join","npmUtils","pathUtils","path","_","invariant","invariant","join","fsx","invariant","_","path","join","invariant","join","path","outputChunk","invariant","join","invariant","_","_a","_b","fsx","path","_","options","join"]}